{%- liquid
  assign current_variant = product.selected_or_first_available_variant

  if block_settings
    assign variant_style = block_settings.variant-style
    assign size_chart_enabled = block_settings.size-chart-enabled
    assign size_chart_option = block_settings.size-chart-option | strip | downcase
    assign swatches = block_settings.swatches
  endif
-%}

{%- unless product.has_only_default_variant -%}
  {% if grid %}
    {% liquid
        assign swatches = 'none'
        assign variant_style = 'radios'
    %}
    <style>
      product-options-element {
        display: none !important;
      }
    </style>
    <div class="options-grid">
    <div class="options-grid-title">STOCK</div>
  {% endif %}
  <product-options-element
    class="product-options--root"
    data-id="{{ id }}"
    data-main-product="{{ main_product }}"
    data-product-handle="{{ product.handle }}"
    data-product-url="{{ product.url }}"
    aria-busy="false"
  >
    <div class="product-options--container" data-container="block">
      {%- for option in product.options_with_values -%}
        <div class="product-options--option" data-index="{{ forloop.index0 }}">
          {%- liquid
            assign option_name = option.name | strip | downcase
            assign swatch_count = option.values | map: 'swatch' | compact | size

            if swatches != 'none' and swatch_count > 0
              render 'swatches', option: option, id: id, shape: swatches, grid_item: false
            elsif variant_style == 'dropdowns'
              render 'disclosure', display_label: true, label_name: option.name, option_names: option.values, current_value: option.selected_value, id: id, type: 'option-picker'
            else
              render 'radios', option: option, id: id
            endif

            comment
              "The size chart link gets moved with JS"
            endcomment
          -%}

          {%- if size_chart_enabled and size_chart_option == option_name -%}
            <div class="product-size-chart--root" style="display:none;">
              <modal-trigger
                class="product-size-chart--link"
                data-id="{{ id }}_size-chart"
                data-item="block-link"
                aria-haspopup="true"
                tabindex="0"
              >
                <span>
                  {{- 'products.size_chart' | t -}}
                </span>
              </modal-trigger>
            </div>
          {%- endif -%}
        </div>

        {%- liquid
          unless current_variant
            capture variant_title
              echo variant_title
              echo option.selected_value

              unless forloop.last
                echo ' / '
              endunless
            endcapture
          endunless
        -%}
      {%- endfor -%}
    </div>

    <script type="application/json" id="variant-json-{{ id }}">
      {%- liquid
        if current_variant
          assign inventory_policy = current_variant.inventory_policy
          assign policy_insert = '"inventory_policy":"' | append: inventory_policy | append: '",'

          assign inventory_quantity = current_variant.inventory_quantity | default: 0
          assign quantity_insert = '"inventory_quantity":' | append: inventory_quantity | append: ','

          assign inserts = policy_insert | append: quantity_insert | append: '"id"'
          echo current_variant | json | replace: '"id"', inserts
        else
          echo '{ "public_title": "' | append: variant_title | append: '" }'
        endif
      -%}
    </script>
  </product-options-element>

  {% if grid %}
      <table id="options_grid">
        <thead>
          <tr>
            <th></th>
            {%- for size in product.options_with_values[1].values -%}
              <th>{{ size | escape }}</th>
            {%- endfor -%}
          </tr>
        </thead>
        <tbody>
          {%- for color in product.options_with_values[0].values -%}
            <tr>
              <th>{{ color }}</th>
              {%- for size in product.options_with_values[1].values -%}
                {% liquid
                assign this_variant = product.variants | where: "option1", color | where: "option2", size | first
                %}
                <td>
                  {%- if this_variant.available -%}
                    <input
                      class="radios--input"
                      type="radio"
                      id="{{ radios_name }}-{{ this_variant.id }}"
                      name="option_selection"
                      data-option1-name="{{ product.options_with_values[0].name | strip | downcase }}"
                      data-option2-name="{{ product.options_with_values[1].name | strip | downcase }}"
                      data-option1-value={{ color | escape }}
                      data-option2-value={{ size | escape }}
                      value="{{ this_variant.id }}"
                    />
                  {%- else -%}
                    <span class="unavailable" aria-hidden="true">Ã—</span>
                  {%- endif -%}
                </td>
              {%- endfor -%}
            </tr>
          {%- endfor -%}
        </tbody>
      </table>
    </div>
    <script>
      function updateRadioSelection(optionName, value) {
        // Query all radio buttons with the specified data-option-name
        const radios = document.querySelectorAll(`.product-options--option input[type="radio"][data-option-name="${optionName}"]`);

        radios.forEach((radio) => {
          if (radio.value === value) {
            // Set the checked attribute
            radio.checked = true;
            const changeEvent = new Event('change', { bubbles: true, cancelable: true });
            radio.dispatchEvent(changeEvent);
          } else {
            // Uncheck the other radio buttons
            radio.checked = false;
          }
        });
      }
      document.getElementById('options_grid').addEventListener('change', (event) => {
        if (event.target.type === 'radio') {
          const selectedRadio = event.target;
          const color = selectedRadio.getAttribute('data-option1-value');
          const size = selectedRadio.getAttribute('data-option2-value');

          const option1name = selectedRadio.getAttribute('data-option1-name');
          const option2name = selectedRadio.getAttribute('data-option2-name');

          // Update dropdowns
          parent = document.querySelector('.product-options--root');
          updateRadioSelection(option1name, color);
          setTimeout(() => {
            updateRadioSelection(option2name, size);
          }, 50); // Adjust delay as needed
        }
      });
    </script>
  {% endif %}

{%- endunless -%}